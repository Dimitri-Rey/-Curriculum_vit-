/*********************************************
* GESTION DU MENU BURGER + SCROLL ANCRES
*********************************************/
document.addEventListener("DOMContentLoaded", () => {
    const burger = document.querySelector(".burger");
    const navList = document.querySelector("nav ul");
    if (burger && navList) {
        burger.addEventListener("click", toggleNavList);
    }

    document.querySelectorAll('a[href^="#"]').forEach((link) => {
        link.addEventListener("click", smoothScroll);
    });

    const fadeElements = Array.from(document.querySelectorAll(".fade-in"));
    window.addEventListener("scroll", fadeInOnScroll);
    fadeInOnScroll();

    const scrollObserver = new IntersectionObserver(handleIntersection, {
        threshold: 0.1,
        rootMargin: "0px",
    });
    document.querySelectorAll(".animate-on-scroll").forEach((el) => scrollObserver.observe(el));

    // Gestion du formulaire de contact
    const contactForm = document.getElementById('contactForm');
    if (contactForm) {
        contactForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const submitBtn = contactForm.querySelector('.submit-btn');
            const originalText = submitBtn.innerHTML;
            
            // Animation du bouton pendant l'envoi
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Envoi en cours...';
            submitBtn.disabled = true;
            
            try {
                // Simulation d'envoi (à remplacer par votre véritable endpoint)
                await new Promise(resolve => setTimeout(resolve, 1500));
                
                // Succès
                submitBtn.innerHTML = '<i class="fas fa-check"></i> Message envoyé !';
                submitBtn.style.background = 'linear-gradient(135deg, #2ecc71, #27ae60)';
                
                // Reset du formulaire
                contactForm.reset();
                
                // Retour à l'état initial après 3 secondes
                setTimeout(() => {
                    submitBtn.innerHTML = originalText;
                    submitBtn.style.background = '';
                    submitBtn.disabled = false;
                }, 3000);
                
            } catch (error) {
                // Gestion des erreurs
                submitBtn.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Erreur d\'envoi';
                submitBtn.style.background = 'linear-gradient(135deg, #e74c3c, #c0392b)';
                
                setTimeout(() => {
                    submitBtn.innerHTML = originalText;
                    submitBtn.style.background = '';
                    submitBtn.disabled = false;
                }, 3000);
            }
        });
    }

    // Gestion du menu mobile actif
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.nav-mobile a');

    function updateActiveMenu() {
        const scrollPosition = window.scrollY + 100;

        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.offsetHeight;
            const sectionId = section.getAttribute('id');

            if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
                navLinks.forEach(link => {
                    link.classList.remove('active');
                    if (link.getAttribute('href') === `#${sectionId}`) {
                        link.classList.add('active');
                    }
                });
            }
        });
    }

    window.addEventListener('scroll', updateActiveMenu);
    updateActiveMenu();
});

function toggleNavList() {
    navList.classList.toggle("show");
}

function smoothScroll(event) {
    const target = document.querySelector(event.currentTarget.getAttribute("href"));
    if (target) {
        event.preventDefault();
        window.scrollTo({
            top: target.offsetTop - 50,
            behavior: "smooth",
        });
        navList && navList.classList.remove("show");
    }
}

function fadeInOnScroll() {
    for (let i = fadeElements.length - 1; i >= 0; i--) {
        const rect = fadeElements[i].getBoundingClientRect();
        if (rect.top <= window.innerHeight * 0.8) {
            fadeElements[i].classList.add("visible");
            fadeElements.splice(i, 1);
        }
    }
    if (fadeElements.length === 0) {
        window.removeEventListener("scroll", fadeInOnScroll);
    }
}

function handleIntersection(entries) {
    entries.forEach((entry) => {
        if (entry.isIntersecting) {
            entry.target.classList.add("visible");
            if (entry.target.classList.contains("stat-item")) {
                const counter = entry.target.querySelector(".counter");
                if (counter && counter.dataset.value) {
                    animateCounter(counter, parseInt(counter.dataset.value, 10));
                }
            }
        }
    });
}

/*********************************************
* DEBOUNCE (pour optimiser certains scrolls)
*********************************************/
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

/*********************************************
* ANIMATION DES COMPTEURS
*********************************************/
function animateCounter(counter, target) {
    if (!counter) return;
    const duration = 2000;
    const startTime = performance.now();
    function update(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        const currentValue = Math.round(target * progress);
        counter.textContent = currentValue;
        if (progress < 1) {
            requestAnimationFrame(update);
        }
    }
    requestAnimationFrame(update);
}

/*********************************************
* OBSERVER POUR LES ÉLÉMENTS AU SCROLL
* (Pour .animate-on-scroll, .stat-item, etc.)
*********************************************/
document.addEventListener("DOMContentLoaded", () => {
    const scrollObserver = new IntersectionObserver(
        (entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    entry.target.classList.add("visible");
                    // Si c’est un compteur
                    if (entry.target.classList.contains("stat-item")) {
                        const counter = entry.target.querySelector(".counter");
                        if (counter && counter.dataset.value) {
                            animateCounter(counter, parseInt(counter.dataset.value, 10));
                        }
                    }
                }
            });
        },
        {
            threshold: 0.1,
            rootMargin: "0px",
        }
    );
    // Appliquer l’observer à tous les éléments souhaités
    document
        .querySelectorAll(".animate-on-scroll")
        .forEach((el) => scrollObserver.observe(el));
});

/*********************************************
* CRÉATION D’EFFETS (PARTICULES, CURSEUR)
*********************************************/
function createParticles() {
    const header = document.querySelector("header");
    if (!header) return; // Si vous n’avez pas de header, sortez
    const fragment = document.createDocumentFragment();
    const particles = document.createElement("div");
    particles.className = "particles";
    for (let i = 0; i < 50; i++) {
        const particle = document.createElement("div");
        particle.className = "particle";
        particle.style.cssText = `
        left: ${Math.random() * 100}%;
        top: ${Math.random() * 100}%;
        animation-duration: ${Math.random() * 3 + 2}s;
        animation-delay: ${Math.random() * 2}s;
        `;
        fragment.appendChild(particle);
    }
    particles.appendChild(fragment);
    header.appendChild(particles);
}

function createCursorEffect() {
    const cursor = document.createElement("div");
    cursor.className = "cursor-effect";
    document.body.appendChild(cursor);
    document.addEventListener("mousemove", (e) => {
        cursor.style.left = e.clientX + "px";
        cursor.style.top = e.clientY + "px";
    });
}

/*********************************************
* ANIMATION DE TEXTE "TYPING"
*********************************************/
const messagesToType = [
    "Spécialiste en Intelligence Artificielle 🤖",
    "Expert en Cloud Computing ☁️",
    "Passionné par l'Innovation 💡",
    "Développeur Full Stack 💻",
];
let messageIndex = 0;
let charIndex = 0;
let isDeleting = false;
const typingDelay = 100;
const erasingDelay = 50;
const newMessageDelay = 2000;
function typeMessage() {
    const typedElement = document.getElementById("typed");
    if (!typedElement) return; // Si l'élément #typed n’existe pas
    const currentMessage = messagesToType[messageIndex];
    if (isDeleting) {
        charIndex--;
    } else {
        charIndex++;
    }
    typedElement.textContent = currentMessage.substring(0, charIndex);
    let typeSpeed = isDeleting ? erasingDelay : typingDelay;
    if (!isDeleting && charIndex === currentMessage.length) {
        typeSpeed = newMessageDelay;
        isDeleting = true;
    } else if (isDeleting && charIndex === 0) {
        isDeleting = false;
        messageIndex++;
        if (messageIndex === messagesToType.length) {
            messageIndex = 0;
        }
    }
    setTimeout(typeMessage, typeSpeed);
}

/*********************************************
* TIMELINE ITEMS (SI VOUS AVEZ .timeline-item)
*********************************************/
document.addEventListener("DOMContentLoaded", () => {
    const timelineItems = document.querySelectorAll(".timeline-item");
    if (timelineItems.length > 0) {
        const timelineObserver = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add("visible");
                        timelineObserver.unobserve(entry.target);
                    }
                });
            },
            {
                threshold: 0.5,
                rootMargin: "0px 0px -50px 0px",
            }
        );
        timelineItems.forEach((item) => {
            timelineObserver.observe(item);
        });
    }
});

/*********************************************
* NAVIGATION COMPACTE AU SCROLL (si .glass-nav)
*********************************************/
document.addEventListener("scroll", () => {
    const nav = document.querySelector(".glass-nav");
    // Si vous aviez .modern-nav, remplacez
    // const nav = document.querySelector(".modern-nav");
    if (!nav) return;
    if (window.scrollY > 100) {
        nav.classList.add("nav-scrolled");
    } else {
        nav.classList.remove("nav-scrolled");
    }
});

/*********************************************
* POPUP DE FIN DE PAGE
*********************************************/
function openChatBot() {
    const chatWidget = document.querySelector(".chat-widget");
    if (chatWidget) {
        chatWidget.classList.add("show");
    }
    const chatBox = document.querySelector(".chat-box");
    if (chatBox) {
        chatBox.classList.add("active");
    }
    const endPagePopup = document.getElementById("endPagePopup");
    if (endPagePopup) {
        endPagePopup.style.display = "none";
    }
}

// Affichage du popup en bas de page
const handleScrollEndPopup = debounce(() => {
    const endPagePopup = document.getElementById("endPagePopup");
    if (!endPagePopup) return;
    if (window.innerHeight + window.scrollY >= document.documentElement.scrollHeight - 100) {
        endPagePopup.style.display = "block";
    }
}, 100);
document.addEventListener("scroll", handleScrollEndPopup);

/*********************************************
* CAPTCHAS ET GÉNÉRATION DU PORTFOLIO
*********************************************/
function generateCaptcha() {
    const chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    let captcha = "";
    for (let i = 0; i < 6; i++) {
        captcha += chars[Math.floor(Math.random() * chars.length)];
    }
    const captchaText = document.getElementById("captchaText");
    if (captchaText) {
        captchaText.textContent = captcha;
    }
    return captcha;
}

const generationSteps = [
    "Initialisation de l'environnement...",
    "Chargement des composants...",
    "Configuration du thème...",
    "Génération du contenu dynamique...",
    "Optimisation des performances...",
    "Finalisation du portfolio...",
];
function startGeneration() {
    const generationProcess = document.querySelector(".generation-process");
    const progressBar = document.querySelector(".progress-bar");
    const progressText = document.querySelector(".progress-text");
    const stepsContainer = document.querySelector(".generation-steps");
    const siteContent = document.getElementById("siteContent");
    if (!generationProcess || !progressBar || !progressText || !stepsContainer || !siteContent) return;
    
    // Assurez-vous que les éléments ont des dimensions fixes
    generationProcess.style.minHeight = "200px"; // Exemple de hauteur minimale
    siteContent.style.minHeight = "500px"; // Exemple de hauteur minimale

    generationProcess.classList.remove("hidden");
    let progress = 0;
    let stepIndex = 0;
    const updateProgress = setInterval(() => {
        progress += 2;
        progressBar.style.width = `${progress}%`;
        progressText.textContent = `${progress}%`;
        if (progress % 20 === 0 && stepIndex < generationSteps.length) {
            const stepElement = document.createElement("div");
            stepElement.className = "line";
            stepElement.innerHTML = `<span class="prompt">></span> ${generationSteps[stepIndex]}`;
            stepsContainer.appendChild(stepElement);
            stepIndex++;
        }
        if (progress >= 100) {
            clearInterval(updateProgress);
            setTimeout(() => {
                const loader = document.getElementById("terminalLoader");
                if (loader) {
                    loader.style.opacity = "0";
                    setTimeout(() => {
                        loader.style.display = "none";
                        siteContent.classList.remove("hidden");
                        setTimeout(() => siteContent.classList.add("visible"), 100);
                    }, 1000);
                }
            }, 1000);
        }
    }, 100);
}

/*********************************************
* CHATBOT
*********************************************/
// Sélecteurs fréquemment utilisés pour le chat
const chatElements = {
    box: document.querySelector(".chat-box"),
    messages: document.querySelector(".chat-messages"),
    input: document.querySelector(".chat-input input"),
    sendButton: document.querySelector(".send-message"),
    closeButton: document.querySelector(".close-chat"),
    typingIndicator: document.querySelector(".chat-typing"),
};
// Classe Chatbot
class Chatbot {
    constructor() {
        // Réponses sous forme d'objet
        this.responses = {
            // Salutations
            "bonjour": "👋 Bonjour ! Je suis l'assistant virtuel d'Alex. Comment puis-je vous aider aujourd'hui ? \n\n💡 Vous pouvez me poser des questions sur :\n• Les compétences d'Alex\n• Ses projets\n• Sa disponibilité\n• Ses tarifs",
            "salut": "👋 Hey ! Ravi de vous rencontrer ! Je suis là pour vous parler des services d'Alex. Que souhaitez-vous savoir ? 😊",
            "hello": "👋 Hello ! Super de vous voir ici ! Comment puis-je vous aider ? 🌟",
            "bonsoir": "🌙 Bonsoir ! Je suis l'assistant d'Alex, disponible 24/7 pour répondre à vos questions !",
            "coucou": "👋 Coucou ! Ravi de vous voir ! Je peux vous renseigner sur tout ce qui concerne Alex et ses services 😊",
            // Disponibilité et Contact
            "disponible": "📅 Voici les disponibilités d'Alex :\n\n• Nouveaux projets : à partir de septembre 2024\n• Consulting : quelques créneaux par semaine\n• Formation : sur demande\n\nVoulez-vous prendre rendez-vous ? 🤝",
            "disponibilité": "🗓️ Alex accepte de nouveaux projets à partir de septembre 2024.\n\nPour un RDV rapide :\n📧 Email : alex.garnier@techpro.com\n📱 Tél : 07 89 45 67 12",
            "contact": "📬 Voici comment joindre Alex :\n\n📧 Email : alex.garnier@techpro.com\n📱 Téléphone : 07 89 45 67 12\n💼 LinkedIn : /in/alex-garnier\n🌐 Site : www.alex-garnier.com",
            "email": "📧 Vous pouvez contacter Alex à : alex.garnier@techpro.com\n\nIl répond généralement sous 24h ! ⚡",
            "téléphone": "📱 Ligne directe d'Alex : 07 89 45 67 12\n\nDisponible en semaine de 9h à 18h 🕒",
            "rendez-vous": "📅 Pour planifier un rendez-vous :\n\n1. Envoyez vos disponibilités par email\n2. Précisez le sujet de la rencontre\n3. Indiquez votre mode préféré (visio/présentiel)\n\n→ alex.garnier@techpro.com 📧",
            // Compétences et Expertise
            "compétences": "🚀 Les domaines d'expertise d'Alex :\n\n🤖 Intelligence Artificielle\n☁️ Cloud Computing\n💻 Développement Web\n📊 Data Science\n\nQuel domaine vous intéresse ? Je peux vous donner plus de détails !",
            "intelligence artificielle": "🤖 Expertise en IA :\n\n• Machine Learning\n• Deep Learning\n• NLP\n• Computer Vision\n\n🏆 10+ ans d'expérience\n📈 50+ projets réalisés\n\nVoulez-vous des exemples concrets ? 😊",
            "ia": "🤖 En IA, Alex c'est :\n\n• 10+ ans d'expérience\n• 3 brevets déposés\n• Publications scientifiques\n• Projets innovants\n\n🎯 Spécialités : ML, DL, NLP\nOn en discute ? 😊",
            "cloud": "☁️ Expertise Cloud :\n\n• AWS ⭐⭐⭐\n• Azure ⭐⭐⭐\n• Google Cloud ⭐⭐⭐\n\n🛠️ Services : Migration, Optimisation, DevOps\n💡 Certifications : AWS Solutions Architect, Azure Expert",
            "développement": "💻 Stack technique d'Alex :\n\n• Backend : Python, Java, Node.js\n• Frontend : React, Vue.js\n• Mobile : React Native\n• BDD : PostgreSQL, MongoDB\n\n🏗️ Architecture : Microservices, Serverless",
            "web": "🌐 Dev Web Expertise :\n\n• Frontend : React, Vue.js, TypeScript\n• Backend : Node.js, Python\n• Performance : SEO, PWA\n• UI/UX : Design responsive\n\n🚀 +100 sites en production",
            // Formation et Parcours
            "formation": "🎓 Parcours académique :\n\n• Doctorat en IA (Paris)\n• Master Informatique (Lyon)\n• Certifications : AWS, Azure, Google\n\n📚 Formation continue : +30h/mois",
            "expérience": "💼 Parcours professionnel :\n\n• 2021-now : Lead Dev IA @NeuralTech\n• 2015-2021 : Senior Dev @CodeGen\n• 2014 : Stage @Stanford\n\n🏆 +50 projets réussis",
            "parcours": "🚀 Evolution de carrière :\n\n1. 2014 : Début @CodeGen\n2. 2015-2021 : Evolution Senior\n3. 2021-now : Lead IA @NeuralTech\n\n📈 Croissance continue !",
            // Projets
            "projets": "🎯 Projets phares :\n\n1. 🏥 IA Médicale Prédictive\n2. 🛒 Système E-commerce IA\n3. ⚡ Gestion Énergétique Smart\n\nLequel vous intéresse ? 😊",
            "réalisations": "🏆 Top réalisations :\n\n• 🤖 Plateforme IA Médicale\n• 📊 Analytics E-commerce\n• 🌱 App Eco-energie\n\n💡 Détails souhaités ?",
            // Tarifs et Devis
            "tarifs": "💰 Grille tarifaire :\n\n• Consulting : 800-1200€/jour\n• Développement : sur devis\n• Formation : 2000€/jour\n\n📝 Devis personnalisé sur demande",
            "devis": "📋 Pour un devis personnalisé :\n\n1. Décrivez votre projet\n2. Précisez vos délais\n3. Envoyez à alex.garnier@techpro.com\n\n⚡ Réponse sous 48h !",
            "prix": "💳 Les tarifs varient selon :\n\n• Complexité du projet\n• Durée estimée\n• Technologies requises\n\n💡 Besoin d'un devis ? Contactez-nous !",
            // Questions diverses
            "merci": "🙏 Je vous en prie ! N'hésitez pas si vous avez d'autres questions. Bonne journée ! ✨",
            "au revoir": "👋 Au revoir ! Merci de votre intérêt pour les services d'Alex. À bientôt ! 🌟",
            "localisation": "📍 Localisation :\n\n• Bureau : Paris 8ème\n• Télétravail : Possible\n• Déplacements : France + International\n\n🌍 Clients dans 15+ pays",
            "langue": "🗣️ Langues parlées :\n\n• Français : Natif 🇫🇷\n• Anglais : Bilingue 🇬🇧\n• Espagnol : Courant 🇪🇸",
            // Réponse par défaut
            "default": "❓ Désolé, je n'ai pas bien compris.\n\nJe peux vous parler de :\n• 💼 Compétences\n• 🚀 Projets\n• 📅 Disponibilités\n• 💰 Tarifs\n\nQue souhaitez-vous savoir ? 😊"
        };
        this.conversationHistory = [];
        this.typingSpeed = 50; // ms par caractère
        this.isTyping = false;
        this.init(); // Génère la structure HTML interne du chat
        this.setupEventListeners();
    }
    init() {
        // Exemple : si vous souhaitez re-construire le HTML du chat dynamiquement
        // Dans votre cas, le HTML existe peut-être déjà. Adaptez selon vos besoins.
        const chatBox = document.querySelector(".chat-box");
        if (!chatBox) return;
        chatBox.innerHTML = `
        <div class="chat-header">
        <div class="chat-header-info">
        <div class="chat-avatar">
        <i class="fas fa-robot"></i>
        </div>
        <div>
        <h3>Assistant IA</h3>
        <span class="status">En ligne</span>
        </div>
        </div>
        <button class="close-chat">&#x2715;</button>
        </div>
        <div class="chat-messages"></div>
        <div class="chat-typing" style="display:none">
        <span class="typing-indicator"></span>
        </div>
        <div class="chat-input">
        <input type="text" placeholder="Posez votre question...">
        <button class="send-message">
        <i class="fas fa-paper-plane"></i>
        </button>
        </div>
        `;
        // Mettez à jour vos sélecteurs après avoir injecté le HTML
        chatElements.box = chatBox;
        chatElements.messages = chatBox.querySelector(".chat-messages");
        chatElements.input = chatBox.querySelector(".chat-input input");
        chatElements.sendButton = chatBox.querySelector(".send-message");
        chatElements.closeButton = chatBox.querySelector(".close-chat");
        chatElements.typingIndicator = chatBox.querySelector(".chat-typing");
    }
    setupEventListeners() {
        const { input, sendButton, closeButton, box } = chatElements;
        if (closeButton) {
            closeButton.addEventListener("click", () => {
                if (box) box.style.display = "none";
            });
        }
        if (sendButton) {
            sendButton.addEventListener("click", () => this.handleMessageSend());
        }
        if (input) {
            input.addEventListener("keypress", (e) => {
                if (e.key === "Enter") {
                    this.handleMessageSend();
                }
            });
        }
    }
    handleMessageSend() {
        const { input } = chatElements;
        if (!input) return;
        const message = input.value.trim();
        if (message) {
            this.addMessage(message, "user");
            input.value = "";
            this.processUserInput(message);
        }
    }
    addMessage(text, type) {
        if (this.isTyping) return;
        const { messages } = chatElements;
        if (!messages) return;
        const messageEl = document.createElement("div");
        messageEl.classList.add("message", `${type}-message`);
        // Animation de "typewriting" pour le bot
        if (type === "bot") {
            this.isTyping = true;
            this.showTypingIndicator();
            let index = 0;
            const typeText = () => {
                if (index < text.length) {
                    messageEl.textContent += text.charAt(index);
                    index++;
                    requestAnimationFrame(() => setTimeout(typeText, this.typingSpeed));
                } else {
                    this.isTyping = false;
                    this.hideTypingIndicator();
                }
                messages.scrollTop = messages.scrollHeight;
            };
            setTimeout(() => {
                messages.appendChild(messageEl);
                typeText();
            }, 500);
        } else {
            // Message utilisateur
            messageEl.textContent = text;
            messages.appendChild(messageEl);
            messages.scrollTop = messages.scrollHeight;
        }
        // Historique
        this.conversationHistory.push({ type, text });
    }
    showTypingIndicator() {
        const { typingIndicator } = chatElements;
        if (typingIndicator) {
            typingIndicator.style.display = "block";
        }
    }
    hideTypingIndicator() {
        const { typingIndicator } = chatElements;
        if (typingIndicator) {
            typingIndicator.style.display = "none";
        }
    }
    processUserInput(input) {
        const lowercaseInput = input.toLowerCase();
        let response = this.responses.default;
        // Recherche d'une clé qui correspond à un mot-clé
        for (const [key, value] of Object.entries(this.responses)) {
            if (lowercaseInput.includes(key)) {
                response = value;
                break;
            }
        }
        this.addMessage(response, "bot");
    }
}

/*********************************************
* INITIALISATIONS GLOBALES
*********************************************/
document.addEventListener("DOMContentLoaded", () => {
    // Lance l'effet de texte tapé
    typeMessage();
    // Crée l’effet particules & curseur (si vous voulez ces effets)
    createParticles();
    createCursorEffect();
    // Lance le chatbot
    const chatbot = new Chatbot();
    // Génération captcha initiale
    let currentCaptcha = generateCaptcha();
    
    // Gestion du captcha
    const captchaInput = document.getElementById("captchaInput");
    const captchaButton = document.getElementById("validateCaptcha");

    function validateCaptcha() {
        if (!captchaInput) return;
        if (captchaInput.value.toUpperCase() === currentCaptcha) {
            document.querySelector(".captcha-container").innerHTML =
                '<div class="line"><span class="prompt">✓</span> Captcha validé. Début de la génération...</div>';
            startGeneration();
        } else {
            captchaInput.value = "";
            currentCaptcha = generateCaptcha();
            captchaInput.placeholder = "Captcha incorrect, réessayez";
        }
    }

    // Validation par clic sur le bouton
    if (captchaButton) {
        captchaButton.addEventListener("click", validateCaptcha);
    }

    // Validation par touche Entrée
    if (captchaInput) {
        captchaInput.addEventListener("keypress", (e) => {
            if (e.key === "Enter") {
                e.preventDefault(); // Empêche le comportement par défaut
                validateCaptcha();
            }
        });
    }
});

// Au besoin, vous pouvez mettre à jour le titre du chat
const chatTitle = document.querySelector(".chat-header h3");
if (chatTitle) {
    chatTitle.textContent = "Assistant IA";
}

// Infobulle sur la bulle de chat
const chatBubble = document.querySelector(".chat-bubble");
if (chatBubble) {
    chatBubble.setAttribute("title", "Posez-moi vos questions sur Alex 👋");
}