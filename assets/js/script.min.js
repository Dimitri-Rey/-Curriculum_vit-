document.addEventListener("DOMContentLoaded",()=>{const e=document.querySelector(".burger"),t=document.querySelector("nav ul");e&&t&&e.addEventListener("click",()=>{t.classList.toggle("show")});document.querySelectorAll('a[href^="#"]').forEach((e=>{e.addEventListener("click",(n=>{const r=document.querySelector(e.getAttribute("href"));r&&(n.preventDefault(),window.scrollTo({top:r.offsetTop-50,behavior:"smooth"}),t.classList.remove("show"))}))}));const n=Array.from(document.querySelectorAll(".fade-in"));function r(){for(let e=n.length-1;e>=0;e--){const t=n[e].getBoundingClientRect();t.top<=.8*window.innerHeight&&(n[e].classList.add("visible"),n.splice(e,1))}0===n.length&&window.removeEventListener("scroll",r)}window.addEventListener("scroll",r),r()});

// Ajouter la nouvelle classe Chatbot
class Chatbot {
    constructor() {
        this.responses = {
            "bonjour": "Bonjour ! Je suis l'assistant virtuel d'Alex. Comment puis-je vous aider ?",
            "disponibilité": "Alex est actuellement disponible pour de nouveaux projets à partir de [date].",
            "compétences": "Alex est spécialisé en IA, cloud computing et développement web. Voulez-vous en savoir plus sur un domaine particulier ?",
            "contact": "Vous pouvez contacter Alex par email à alex.garnier@techpro.com ou par téléphone au 07 89 45 67 12.",
            "default": "Désolé, je n'ai pas compris votre question. Pouvez-vous la reformuler ?"
        };
        
        this.init();
    }

    init() {
        const chatBubble = document.querySelector('.chat-bubble');
        const chatBox = document.querySelector('.chat-box');
        const closeChat = document.querySelector('.close-chat');
        const sendButton = document.querySelector('.send-message');
        const input = document.querySelector('.chat-input input');
        
        chatBubble.addEventListener('click', () => {
            chatBox.classList.add('active');
            this.addMessage("Bonjour ! Comment puis-je vous aider ?", 'bot');
        });
        
        closeChat.addEventListener('click', () => {
            chatBox.classList.remove('active');
        });
        
        sendButton.addEventListener('click', () => this.handleUserInput(input));
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.handleUserInput(input);
        });
    }

    handleUserInput(input) {
        if (!input.value.trim()) return;
        
        this.addMessage(input.value, 'user');
        this.processUserInput(input.value);
        input.value = '';
    }

    addMessage(text, type) {
        const messagesDiv = document.querySelector('.chat-messages');
        const message = document.createElement('div');
        message.classList.add('message', `${type}-message`);
        message.textContent = text;
        messagesDiv.appendChild(message);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    processUserInput(input) {
        const lowercaseInput = input.toLowerCase();
        let response = this.responses.default;

        for (const [key, value] of Object.entries(this.responses)) {
            if (lowercaseInput.includes(key)) {
                response = value;
                break;
            }
        }

        setTimeout(() => {
            this.addMessage(response, 'bot');
        }, 500);
    }
}

// Initialiser le chatbot avec le reste du code DOMContentLoaded
document.addEventListener('DOMContentLoaded', () => {
    // ... autre code existant ...
    new Chatbot();
});

// Animation des compteurs
const observerOptions = {
    threshold: 0.5
};

const counterObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            const counter = entry.target;
            const target = parseInt(counter.dataset.value);
            const duration = 2000; // 2 secondes
            const increment = target / (duration / 16); // 60 FPS
            let current = 0;

            const updateCounter = () => {
                current += increment;
                counter.textContent = Math.round(current);

                if (current < target) {
                    requestAnimationFrame(updateCounter);
                } else {
                    counter.textContent = target;
                }
            };

            updateCounter();
            counterObserver.unobserve(counter);
        }
    });
}, observerOptions);

document.querySelectorAll('.counter').forEach(counter => {
    counterObserver.observe(counter);
});

// Effet de typing pour le heading
function typeEffect(element, text, speed = 100) {
    let index = 0;
    
    function type() {
        if (index < text.length) {
            element.textContent += text.charAt(index);
            index++;
            setTimeout(type, speed);
        }
    }
    
    type();
}

document.addEventListener("DOMContentLoaded", () => {
    const typingElement = document.getElementById('typing-text');
    const textToType = "Bienvenue dans mon univers numérique !";
    typeEffect(typingElement, textToType, 100);
    
    // ... reste du code existant ...
});