document.addEventListener("DOMContentLoaded",()=>{const e=document.querySelector(".burger"),t=document.querySelector("nav ul");e&&t&&e.addEventListener("click",()=>{t.classList.toggle("show")});document.querySelectorAll('a[href^="#"]').forEach((e=>{e.addEventListener("click",(n=>{const r=document.querySelector(e.getAttribute("href"));r&&(n.preventDefault(),window.scrollTo({top:r.offsetTop-50,behavior:"smooth"}),t.classList.remove("show"))}))}));const n=Array.from(document.querySelectorAll(".fade-in"));function r(){for(let e=n.length-1;e>=0;e--){const t=n[e].getBoundingClientRect();t.top<=.8*window.innerHeight&&(n[e].classList.add("visible"),n.splice(e,1))}0===n.length&&window.removeEventListener("scroll",r)}window.addEventListener("scroll",r),r()});

// Ajouter la nouvelle classe Chatbot
class Chatbot {
    constructor() {
        this.responses = {
            // Salutations
            "bonjour": "üëã Bonjour ! Je suis l'assistant virtuel d'Alex. Comment puis-je vous aider aujourd'hui ? \n\nüí° Vous pouvez me poser des questions sur :\n‚Ä¢ Les comp√©tences d'Alex\n‚Ä¢ Ses projets\n‚Ä¢ Sa disponibilit√©\n‚Ä¢ Ses tarifs",
            "salut": "üëã Hey ! Ravi de vous rencontrer ! Je suis l√† pour vous parler des services d'Alex. Que souhaitez-vous savoir ? üòä",
            "hello": "üëã Hello ! Super de vous voir ici ! Comment puis-je vous aider ? üåü",
            "bonsoir": "üåô Bonsoir ! Je suis l'assistant d'Alex, disponible 24/7 pour r√©pondre √† vos questions !",
            "coucou": "üëã Coucou ! Ravi de vous voir ! Je peux vous renseigner sur tout ce qui concerne Alex et ses services üòä",

            // Disponibilit√© et Contact
            "disponible": "üìÖ Voici les disponibilit√©s d'Alex :\n\n‚Ä¢ Nouveaux projets : √† partir de septembre 2024\n‚Ä¢ Consulting : quelques cr√©neaux par semaine\n‚Ä¢ Formation : sur demande\n\nVoulez-vous prendre rendez-vous ? ü§ù",
            "disponibilit√©": "üóìÔ∏è Alex accepte de nouveaux projets √† partir de septembre 2024.\n\nPour un RDV rapide :\nüìß Email : alex.garnier@techpro.com\nüì± T√©l : 07 89 45 67 12",
            "contact": "üì¨ Voici comment joindre Alex :\n\nüìß Email : alex.garnier@techpro.com\nüì± T√©l√©phone : 07 89 45 67 12\nüíº LinkedIn : /in/alex-garnier\nüåê Site : www.alex-garnier.com",
            "email": "üìß Vous pouvez contacter Alex √† : alex.garnier@techpro.com\n\nIl r√©pond g√©n√©ralement sous 24h ! ‚ö°",
            "t√©l√©phone": "üì± Ligne directe d'Alex : 07 89 45 67 12\n\nDisponible en semaine de 9h √† 18h üïí",
            "rendez-vous": "üìÖ Pour planifier un rendez-vous :\n\n1. Envoyez vos disponibilit√©s par email\n2. Pr√©cisez le sujet de la rencontre\n3. Indiquez votre mode pr√©f√©r√© (visio/pr√©sentiel)\n\n‚Üí alex.garnier@techpro.com üìß",

            // Comp√©tences et Expertise
            "comp√©tences": "üöÄ Les domaines d'expertise d'Alex :\n\nü§ñ Intelligence Artificielle\n‚òÅÔ∏è Cloud Computing\nüíª D√©veloppement Web\nüìä Data Science\n\nQuel domaine vous int√©resse ? Je peux vous donner plus de d√©tails !",
            "intelligence artificielle": "ü§ñ Expertise en IA :\n\n‚Ä¢ Machine Learning\n‚Ä¢ Deep Learning\n‚Ä¢ NLP\n‚Ä¢ Computer Vision\n\nüèÜ 10+ ans d'exp√©rience\nüìà 50+ projets r√©alis√©s\n\nVoulez-vous des exemples concrets ? üòä",
            "ia": "ü§ñ En IA, Alex c'est :\n\n‚Ä¢ 10+ ans d'exp√©rience\n‚Ä¢ 3 brevets d√©pos√©s\n‚Ä¢ Publications scientifiques\n‚Ä¢ Projets innovants\n\nüéØ Sp√©cialit√©s : ML, DL, NLP\nOn en discute ? üòä",
            "cloud": "‚òÅÔ∏è Expertise Cloud :\n\n‚Ä¢ AWS ‚≠ê‚≠ê‚≠ê\n‚Ä¢ Azure ‚≠ê‚≠ê‚≠ê\n‚Ä¢ Google Cloud ‚≠ê‚≠ê‚≠ê\n\nüõ†Ô∏è Services : Migration, Optimisation, DevOps\nüí° Certifications : AWS Solutions Architect, Azure Expert",
            "d√©veloppement": "üíª Stack technique d'Alex :\n\n‚Ä¢ Backend : Python, Java, Node.js\n‚Ä¢ Frontend : React, Vue.js\n‚Ä¢ Mobile : React Native\n‚Ä¢ BDD : PostgreSQL, MongoDB\n\nüèóÔ∏è Architecture : Microservices, Serverless",
            "web": "üåê Dev Web Expertise :\n\n‚Ä¢ Frontend : React, Vue.js, TypeScript\n‚Ä¢ Backend : Node.js, Python\n‚Ä¢ Performance : SEO, PWA\n‚Ä¢ UI/UX : Design responsive\n\nüöÄ +100 sites en production",

            // Formation et Parcours
            "formation": "üéì Parcours acad√©mique :\n\n‚Ä¢ Doctorat en IA (Paris)\n‚Ä¢ Master Informatique (Lyon)\n‚Ä¢ Certifications : AWS, Azure, Google\n\nüìö Formation continue : +30h/mois",
            "exp√©rience": "üíº Parcours professionnel :\n\n‚Ä¢ 2021-now : Lead Dev IA @NeuralTech\n‚Ä¢ 2015-2021 : Senior Dev @CodeGen\n‚Ä¢ 2014 : Stage @Stanford\n\nüèÜ +50 projets r√©ussis",
            "parcours": "üöÄ Evolution de carri√®re :\n\n1. 2014 : D√©but @CodeGen\n2. 2015-2021 : Evolution Senior\n3. 2021-now : Lead IA @NeuralTech\n\nüìà Croissance continue !",

            // Projets
            "projets": "üéØ Projets phares :\n\n1. üè• IA M√©dicale Pr√©dictive\n2. üõí Syst√®me E-commerce IA\n3. ‚ö° Gestion √ânerg√©tique Smart\n\nLequel vous int√©resse ? üòä",
            "r√©alisations": "üèÜ Top r√©alisations :\n\n‚Ä¢ ü§ñ Plateforme IA M√©dicale\n‚Ä¢ üìä Analytics E-commerce\n‚Ä¢ üå± App Eco-energie\n\nüí° D√©tails souhait√©s ?",

            // Tarifs et Devis
            "tarifs": "üí∞ Grille tarifaire :\n\n‚Ä¢ Consulting : 800-1200‚Ç¨/jour\n‚Ä¢ D√©veloppement : sur devis\n‚Ä¢ Formation : 2000‚Ç¨/jour\n\nüìù Devis personnalis√© sur demande",
            "devis": "üìã Pour un devis personnalis√© :\n\n1. D√©crivez votre projet\n2. Pr√©cisez vos d√©lais\n3. Envoyez √† alex.garnier@techpro.com\n\n‚ö° R√©ponse sous 48h !",
            "prix": "üí≥ Les tarifs varient selon :\n\n‚Ä¢ Complexit√© du projet\n‚Ä¢ Dur√©e estim√©e\n‚Ä¢ Technologies requises\n\nüí° Besoin d'un devis ? Contactez-nous !",

            // Questions diverses
            "merci": "üôè Je vous en prie ! N'h√©sitez pas si vous avez d'autres questions. Bonne journ√©e ! ‚ú®",
            "au revoir": "üëã Au revoir ! Merci de votre int√©r√™t pour les services d'Alex. √Ä bient√¥t ! üåü",
            "localisation": "üìç Localisation :\n\n‚Ä¢ Bureau : Paris 8√®me\n‚Ä¢ T√©l√©travail : Possible\n‚Ä¢ D√©placements : France + International\n\nüåç Clients dans 15+ pays",
            "langue": "üó£Ô∏è Langues parl√©es :\n\n‚Ä¢ Fran√ßais : Natif üá´üá∑\n‚Ä¢ Anglais : Bilingue üá¨üáß\n‚Ä¢ Espagnol : Courant üá™üá∏",

            // R√©ponse par d√©faut
            "default": "‚ùì D√©sol√©, je n'ai pas bien compris.\n\nJe peux vous parler de :\n‚Ä¢ üíº Comp√©tences\n‚Ä¢ üöÄ Projets\n‚Ä¢ üìÖ Disponibilit√©s\n‚Ä¢ üí∞ Tarifs\n\nQue souhaitez-vous savoir ? üòä"
        };
        
        // Ajout de nouvelles propri√©t√©s
        this.conversationHistory = [];
        this.typingSpeed = 50; // ms par caract√®re
        this.isTyping = false;
        
        this.init();
        this.setupEventListeners();
    }

    setupEventListeners() {
        const input = document.querySelector('.chat-input input');
        const sendButton = document.querySelector('.send-message');

        // Gestion de l'envoi par le bouton
        sendButton.addEventListener('click', () => {
            this.handleMessageSend();
        });

        // Gestion de l'envoi par la touche Entr√©e
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.handleMessageSend();
            }
        });
    }

    handleMessageSend() {
        const input = document.querySelector('.chat-input input');
        const message = input.value.trim();

        if (message) {
            this.addMessage(message, 'user');
            input.value = '';
            this.processUserInput(message);
        }
    }

    init() {
        const chatBubble = document.querySelector('.chat-bubble');
        const chatBox = document.querySelector('.chat-box');
        const closeChat = document.querySelector('.close-chat');
        const sendButton = document.querySelector('.send-message');
        const input = document.querySelector('.chat-input input');
        
        chatBubble.addEventListener('click', () => {
            chatBox.classList.add('active');
            this.addMessage("Bonjour ! Comment puis-je vous aider ?", 'bot');
        });
        
        closeChat.addEventListener('click', () => {
            chatBox.classList.remove('active');
        });
        
        sendButton.addEventListener('click', () => this.handleUserInput(input));
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.handleUserInput(input);
        });

        // Am√©lioration de l'initialisation
        chatBox.innerHTML = `
            <div class="chat-header">
                <div class="chat-header-info">
                    <div class="chat-avatar">
                        <i class="fas fa-robot"></i>
                    </div>
                    <div>
                        <h3>Assistant IA</h3>
                        <span class="status">En ligne</span>
                    </div>
                </div>
                <button class="close-chat"><i class="fas fa-times"></i></button>
            </div>
            <div class="chat-messages"></div>
            <div class="chat-typing" style="display: none;">
                <span class="typing-indicator"></span>
            </div>
            <div class="chat-input">
                <input type="text" placeholder="Posez votre question...">
                <button class="send-message"><i class="fas fa-paper-plane"></i></button>
            </div>`;
    }

    handleUserInput(input) {
        if (!input.value.trim()) return;
        
        this.addMessage(input.value, 'user');
        this.processUserInput(input.value);
        input.value = '';
    }

    addMessage(text, type) {
        if (this.isTyping) return;
        
        const messagesDiv = document.querySelector('.chat-messages');
        const message = document.createElement('div');
        message.classList.add('message', `${type}-message`);
        
        if (type === 'bot') {
            this.isTyping = true;
            this.showTypingIndicator();
            
            let index = 0;
            const typeText = () => {
                if (index < text.length) {
                    message.textContent += text.charAt(index);
                    index++;
                    setTimeout(typeText, this.typingSpeed);
                } else {
                    this.isTyping = false;
                    this.hideTypingIndicator();
                }
                messagesDiv.scrollTop = messagesDiv.scrollHeight;
            };
            
            setTimeout(() => {
                messagesDiv.appendChild(message);
                typeText();
            }, 500);
        } else {
            message.textContent = text;
            messagesDiv.appendChild(message);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        // Sauvegarder l'historique
        this.conversationHistory.push({ type, text });
    }

    showTypingIndicator() {
        const typingDiv = document.querySelector('.chat-typing');
        typingDiv.style.display = 'block';
    }

    hideTypingIndicator() {
        const typingDiv = document.querySelector('.chat-typing');
        typingDiv.style.display = 'none';
    }

    processUserInput(input) {
        const lowercaseInput = input.toLowerCase();
        let response = this.responses.default;

        // Am√©lioration de la recherche de r√©ponse
        const matchedResponse = Object.entries(this.responses)
            .find(([key]) => lowercaseInput.includes(key));
        
        if (matchedResponse) {
            response = matchedResponse[1];
        }

        this.addMessage(response, 'bot');
    }
}

// Initialiser le chatbot avec le reste du code DOMContentLoaded
document.addEventListener('DOMContentLoaded', () => {
    // ... autre code existant ...
    new Chatbot();
});

// Animation des compteurs am√©lior√©e
const animateCounter = (counter, target) => {
    const duration = 2000;
    const steps = 60;
    const stepValue = target / steps;
    let current = 0;
    
    const updateCounter = () => {
        current += stepValue;
        if (current < target) {
            counter.textContent = Math.round(current);
            requestAnimationFrame(updateCounter);
        } else {
            counter.textContent = target;
        }
    };
    
    updateCounter();
};

// Observer pour les animations au scroll
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px'
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('visible');
            if (entry.target.classList.contains('stat-item')) {
                const counter = entry.target.querySelector('.counter');
                const target = parseInt(counter.dataset.value);
                animateCounter(counter, target);
            }
        }
    });
}, observerOptions);

// Effet de particules
const createParticles = () => {
    const header = document.querySelector('header');
    const particles = document.createElement('div');
    particles.className = 'particles';
    
    for (let i = 0; i < 50; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        particle.style.left = `${Math.random() * 100}%`;
        particle.style.top = `${Math.random() * 100}%`;
        particle.style.animationDuration = `${Math.random() * 3 + 2}s`;
        particle.style.animationDelay = `${Math.random() * 2}s`;
        particles.appendChild(particle);
    }
    
    header.appendChild(particles);
};

// Effet de curseur personnalis√©
const createCursorEffect = () => {
    const cursor = document.createElement('div');
    cursor.className = 'cursor-effect';
    document.body.appendChild(cursor);
    
    document.addEventListener('mousemove', (e) => {
        cursor.style.left = e.clientX + 'px';
        cursor.style.top = e.clientY + 'px';
    });
};

// Initialisation
document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.animate-on-scroll').forEach(el => observer.observe(el));
    createParticles();
    createCursorEffect();
});

// Timeline animation
const timelineItems = document.querySelectorAll('.timeline-item');

const timelineObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('visible');
            timelineObserver.unobserve(entry.target);
        }
    });
}, {
    threshold: 0.5,
    rootMargin: '0px 0px -50px 0px'
});

timelineItems.forEach(item => {
    timelineObserver.observe(item);
});

// Ajout de l'effet typing pour le message d'accueil
const messages = [
    "Sp√©cialiste en Intelligence Artificielle ü§ñ",
    "Expert en Cloud Computing ‚òÅÔ∏è",
    "Passionn√© par l'Innovation üí°",
    "D√©veloppeur Full Stack üíª"
];

let messageIndex = 0;
let charIndex = 0;
let isDeleting = false;
const typingDelay = 100;
const erasingDelay = 50;
const newMessageDelay = 2000;

function typeMessage() {
    const typedElement = document.getElementById('typed');
    if (!typedElement) return;

    const currentMessage = messages[messageIndex];
    
    if (isDeleting) {
        charIndex--;
    } else {
        charIndex++;
    }

    typedElement.textContent = currentMessage.substring(0, charIndex);

    let typeSpeed = isDeleting ? erasingDelay : typingDelay;

    if (!isDeleting && charIndex === currentMessage.length) {
        typeSpeed = newMessageDelay;
        isDeleting = true;
    } else if (isDeleting && charIndex === 0) {
        isDeleting = false;
        messageIndex++;
        if (messageIndex === messages.length) {
            messageIndex = 0;
        }
    }

    setTimeout(typeMessage, typeSpeed);
}

// Initialisation
document.addEventListener('DOMContentLoaded', () => {
    typeMessage();
    // ... reste du code d'initialisation existant
});

// Navigation compacte au scroll
document.addEventListener('scroll', () => {
    const nav = document.querySelector('.modern-nav');
    if (window.scrollY > 100) {
        nav.classList.add('nav-scrolled');
    } else {
        nav.classList.remove('nav-scrolled');
    }
});

// Mise √† jour du titre du chat
document.querySelector('.chat-header h3').textContent = 'Assistant IA';
document.querySelector('.chat-bubble').setAttribute('title', 'Posez-moi vos questions sur Alex üëã');

// G√©n√©ration du captcha
function generateCaptcha() {
    const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    let captcha = '';
    for (let i = 0; i < 6; i++) {
        captcha += chars[Math.floor(Math.random() * chars.length)];
    }
    document.getElementById('captchaText').textContent = captcha;
    return captcha;
}

// √âtapes de g√©n√©ration
const generationSteps = [
    "Initialisation de l'environnement...",
    "Chargement des composants...",
    "Configuration du th√®me...",
    "G√©n√©ration du contenu dynamique...",
    "Optimisation des performances...",
    "Finalisation du portfolio..."
];

// Processus de g√©n√©ration
function startGeneration() {
    const generationProcess = document.querySelector('.generation-process');
    const progressBar = document.querySelector('.progress-bar');
    const progressText = document.querySelector('.progress-text');
    const stepsContainer = document.querySelector('.generation-steps');
    const siteContent = document.getElementById('siteContent');
    
    generationProcess.classList.remove('hidden');
    
    let progress = 0;
    let stepIndex = 0;
    
    const updateProgress = setInterval(() => {
        progress += 2;
        progressBar.style.width = `${progress}%`;
        progressText.textContent = `${progress}%`;
        
        if (progress % 20 === 0 && stepIndex < generationSteps.length) {
            const stepElement = document.createElement('div');
            stepElement.className = 'line';
            stepElement.innerHTML = `<span class="prompt">></span> ${generationSteps[stepIndex]}`;
            stepsContainer.appendChild(stepElement);
            stepIndex++;
        }
        
        if (progress >= 100) {
            clearInterval(updateProgress);
            setTimeout(() => {
                document.getElementById('terminalLoader').style.opacity = '0';
                setTimeout(() => {
                    document.getElementById('terminalLoader').style.display = 'none';
                    siteContent.classList.remove('hidden');
                    setTimeout(() => siteContent.classList.add('visible'), 100);
                }, 1000);
            }, 1000);
        }
    }, 100);
}

// Initialisation
document.addEventListener('DOMContentLoaded', () => {
    const currentCaptcha = generateCaptcha();
    
    document.getElementById('validateCaptcha').addEventListener('click', () => {
        const input = document.getElementById('captchaInput');
        if (input.value.toUpperCase() === currentCaptcha) {
            document.querySelector('.captcha-container').innerHTML = 
                '<div class="line"><span class="prompt">‚úì</span> Captcha valid√©. D√©but de la g√©n√©ration...</div>';
            startGeneration();
        } else {
            input.value = '';
            generateCaptcha();
            input.placeholder = 'Captcha incorrect, r√©essayez';
        }
    });
});

function openChatBot() {
    const chatWidget = document.querySelector('.chat-widget');
    chatWidget.classList.add('show'); // Ajoute la classe show pour afficher le widget
    document.querySelector('.chat-box').classList.add('active');
    document.getElementById('endPagePopup').style.display = 'none';
}

// Modifier l'√©couteur de scroll
document.addEventListener('scroll', function() {
    // V√©rifie si l'utilisateur est proche du bas de la page
    if ((window.innerHeight + window.scrollY) >= document.documentElement.scrollHeight - 100) {
        document.getElementById('endPagePopup').style.display = 'block';
    }
});